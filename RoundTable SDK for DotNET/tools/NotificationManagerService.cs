//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.1.4322.573.
// 
using System.Diagnostics;
using System.Xml.Serialization;
using System;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Web.Services;


/// <remarks/>
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="NotificationManagerSoapBinding", Namespace="http://localhost:8080/ProjectServer/services/NotificationManager")]
public class NotificationManagerService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    /// <remarks/>
    public NotificationManagerService() {
        this.Url = "http://localhost:8080/ProjectServer/services/NotificationManager";
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://notificationManager.services.projectServer.roundtable.dommoni.com", ResponseNamespace="http://localhost:8080/ProjectServer/services/NotificationManager")]
    [return: System.Xml.Serialization.SoapElementAttribute("addNotificationReturn")]
    public int addNotification(Notification notification) {
        object[] results = this.Invoke("addNotification", new object[] {
                    notification});
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginaddNotification(Notification notification, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("addNotification", new object[] {
                    notification}, callback, asyncState);
    }
    
    /// <remarks/>
    public int EndaddNotification(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://notificationManager.services.projectServer.roundtable.dommoni.com", ResponseNamespace="http://localhost:8080/ProjectServer/services/NotificationManager")]
    [return: System.Xml.Serialization.SoapElementAttribute("getNotificationReturn")]
    public Notification getNotification(int notificationId) {
        object[] results = this.Invoke("getNotification", new object[] {
                    notificationId});
        return ((Notification)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetNotification(int notificationId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getNotification", new object[] {
                    notificationId}, callback, asyncState);
    }
    
    /// <remarks/>
    public Notification EndgetNotification(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Notification)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://notificationManager.services.projectServer.roundtable.dommoni.com", ResponseNamespace="http://localhost:8080/ProjectServer/services/NotificationManager")]
    public void dropNotification(int notificationId) {
        this.Invoke("dropNotification", new object[] {
                    notificationId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BegindropNotification(int notificationId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("dropNotification", new object[] {
                    notificationId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EnddropNotification(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://notificationManager.services.projectServer.roundtable.dommoni.com", ResponseNamespace="http://localhost:8080/ProjectServer/services/NotificationManager")]
    public void modifyNotification(Notification notification) {
        this.Invoke("modifyNotification", new object[] {
                    notification});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginmodifyNotification(Notification notification, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("modifyNotification", new object[] {
                    notification}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndmodifyNotification(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://notificationManager.services.projectServer.roundtable.dommoni.com", ResponseNamespace="http://localhost:8080/ProjectServer/services/NotificationManager")]
    [return: System.Xml.Serialization.SoapElementAttribute("getAllNotificationsReturn")]
    public Notification[] getAllNotifications() {
        object[] results = this.Invoke("getAllNotifications", new object[0]);
        return ((Notification[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetAllNotifications(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getAllNotifications", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public Notification[] EndgetAllNotifications(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Notification[])(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://notificationManager.services.projectServer.roundtable.dommoni.com", ResponseNamespace="http://localhost:8080/ProjectServer/services/NotificationManager")]
    [return: System.Xml.Serialization.SoapElementAttribute("getAllNotificationsForProjectReturn")]
    public Notification[] getAllNotificationsForProject(int projectId) {
        object[] results = this.Invoke("getAllNotificationsForProject", new object[] {
                    projectId});
        return ((Notification[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetAllNotificationsForProject(int projectId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getAllNotificationsForProject", new object[] {
                    projectId}, callback, asyncState);
    }
    
    /// <remarks/>
    public Notification[] EndgetAllNotificationsForProject(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Notification[])(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://notificationManager.services.projectServer.roundtable.dommoni.com", ResponseNamespace="http://localhost:8080/ProjectServer/services/NotificationManager")]
    [return: System.Xml.Serialization.SoapElementAttribute("getAllNotificationsForAccountReturn")]
    public Notification[] getAllNotificationsForAccount(int accountId) {
        object[] results = this.Invoke("getAllNotificationsForAccount", new object[] {
                    accountId});
        return ((Notification[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetAllNotificationsForAccount(int accountId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getAllNotificationsForAccount", new object[] {
                    accountId}, callback, asyncState);
    }
    
    /// <remarks/>
    public Notification[] EndgetAllNotificationsForAccount(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Notification[])(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://notificationManager.services.projectServer.roundtable.dommoni.com", ResponseNamespace="http://localhost:8080/ProjectServer/services/NotificationManager")]
    [return: System.Xml.Serialization.SoapElementAttribute("getAllNotificationsForAccountProjectReturn")]
    public Notification[] getAllNotificationsForAccountProject(int accountId, int projectId) {
        object[] results = this.Invoke("getAllNotificationsForAccountProject", new object[] {
                    accountId,
                    projectId});
        return ((Notification[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetAllNotificationsForAccountProject(int accountId, int projectId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getAllNotificationsForAccountProject", new object[] {
                    accountId,
                    projectId}, callback, asyncState);
    }
    
    /// <remarks/>
    public Notification[] EndgetAllNotificationsForAccountProject(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Notification[])(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://notificationManager.services.projectServer.roundtable.dommoni.com", ResponseNamespace="http://localhost:8080/ProjectServer/services/NotificationManager")]
    [return: System.Xml.Serialization.SoapElementAttribute("getAllNotificationsForAccountProjectObjectReturn")]
    public Notification[] getAllNotificationsForAccountProjectObject(int accountId, int projectId, string ojbectName) {
        object[] results = this.Invoke("getAllNotificationsForAccountProjectObject", new object[] {
                    accountId,
                    projectId,
                    ojbectName});
        return ((Notification[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetAllNotificationsForAccountProjectObject(int accountId, int projectId, string ojbectName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getAllNotificationsForAccountProjectObject", new object[] {
                    accountId,
                    projectId,
                    ojbectName}, callback, asyncState);
    }
    
    /// <remarks/>
    public Notification[] EndgetAllNotificationsForAccountProjectObject(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Notification[])(results[0]));
    }
}

/// <remarks/>
[System.Xml.Serialization.SoapTypeAttribute("Notification", "http://www.dommoni.com/ROUNDTABLE")]
public class Notification {
    
    /// <remarks/>
    public string context;
    
    /// <remarks/>
    public int createdBy;
    
    /// <remarks/>
    public System.DateTime createdOn;
    
    /// <remarks/>
    public int id;
    
    /// <remarks/>
    public string name;
    
    /// <remarks/>
    public int[] objectIds;
    
    /// <remarks/>
    public int operation;
    
    /// <remarks/>
    public int projectId;
    
    /// <remarks/>
    public int type;
    
    /// <remarks/>
    public int[] userIds;
}
